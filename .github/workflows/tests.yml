# fmt: off
name: Tests

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
#  push:
#    branches:
#      - main

jobs:
  tests:
    name: ${{ matrix.session }} ${{ matrix.python }} / ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          #          - { python: "3.9", os: "macos-latest", session: "mypy" }
          #          - { python: "3.9", os: "macos-latest", session: "tests" }
          #          - { python: "3.9", os: "ubuntu-latest", session: "mypy" }
          #          - { python: "3.9", os: "ubuntu-latest", session: "tests" }
#          - { python: "3.10", os: "macos-latest", session: "tests", poetry-version: "1.6.1" }
          #          - { python: "3.10", os: "ubuntu-latest", session: "docs-build" }
          #          - { python: "3.10", os: "ubuntu-latest", session: "mypy" }
          #          - { python: "3.10", os: "ubuntu-latest", session: "pre-commit" }
          #          - { python: "3.10", os: "ubuntu-latest", session: "safety" }
          - { python: "3.10", os: "ubuntu-latest", session: "tests", poetry-version: "1.6.1" }
          #          - { python: "3.10", os: "ubuntu-latest", session: "typeguard" }
          #          - { python: "3.10", os: "ubuntu-latest", session: "xdoctest" }
#          - { python: "3.10", os: "windows-latest", session: "tests", poetry-version: "1.6.1" }

    env:
      NOXSESSION: ${{ matrix.session }}
      FORCE_COLOR: "1"
      PRE_COMMIT_COLOR: "always"

    steps:
      - name: Check out the repository
        id: checkout
        uses: actions/checkout@v5

      - name: Set up Python ${{ matrix.python }}
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
          cache: "pip"

      - name: Install poetry
        id: install-poetry
        uses: snok/install-poetry@v1.4.1
        with:
          version: ${{ matrix.poetry-version }}
          virtualenvs-create: true
          virtualenvs-in-project: true # if true, create .venv in project root; else create virtualenvs in {cache-dir}/virtualenvs
          installer-parallel: true

      - name: Upgrade pip
        id: upgrade-pip
        run: |
          pip install --constraint=.github/workflows/constraints.txt pip
          pip --version

      - name: Install Nox
        id: install-nox
        run: |
          pipx install --pip-args=--constraint=.github/workflows/constraints.txt nox
          pipx inject --pip-args=--constraint=.github/workflows/constraints.txt nox nox-poetry
          nox --version

      - name: Cache Poetry virtual environments and pip cache
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            ./.venv
            ./.nox/
            ~/.local/
          key: ${{ runner.os }}-nox-poetry-${{ matrix.python }}-${{ hashFiles('poetry.lock') }}

      - name: Compute pre-commit cache key
        if: matrix.session == 'pre-commit'
        id: pre-commit-cache
        shell: python
        run: |
          import hashlib
          import sys

          python = "py{}.{}".format(*sys.version_info[:2])
          payload = sys.version.encode() + sys.executable.encode()
          digest = hashlib.sha256(payload).hexdigest()
          result = "${{ runner.os }}-{}-{}-pre-commit".format(python, digest[:8])

          print("::set-output name=result::{}".format(result))

      - name: Restore pre-commit cache
        uses: actions/cache@v4
        if: matrix.session == 'pre-commit'
        id: pre-commit-cache-restore
        with:
          path: ~/.cache/pre-commit
          key: ${{ steps.pre-commit-cache.outputs.result }}-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            ${{ steps.pre-commit-cache.outputs.result }}-

      - name: Run Nox
        id: run-nox
        run: |
          nox --python=${{ matrix.python }}

      - name: Upload coverage data
        if: always() && matrix.session == 'tests'
        id: upload-coverage-data
        uses: "actions/upload-artifact@v4"
        with:
          name: coverage-data
          path: ".coverage.*"

      - name: Upload documentation
        if: matrix.session == 'docs-build'
        id: upload-docs
        uses: actions/upload-artifact@v4
        with:
          name: docs
          path: docs/_build

  coverage:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repository
        id: checkout
        uses: actions/checkout@v5

      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version-file: '.python-version'
          cache: "pip"

      - name: Install poetry
        id: install-poetry
        uses: snok/install-poetry@v1.4.1
        with:
          version: "1.6.1"
          virtualenvs-create: true
          virtualenvs-in-project: true  # if true, create .venv in project root;else create virtualenvs in {cache-dir}/virtualenvs
          installer-parallel: true

      - name: Upgrade pip
        id: upgrade-pip
        run: |
          pip install --constraint=.github/workflows/constraints.txt pip
          pip --version

      - name: Install Nox
        id: install-nox
        run: |
          pipx install --pip-args=--constraint=.github/workflows/constraints.txt nox
          pipx inject --pip-args=--constraint=.github/workflows/constraints.txt nox nox-poetry
          nox --version

      - name: Cache Poetry virtual environments and pip cache
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            ./.venv
            ./.nox/
            ~/.local/
          key: ${{ runner.os }}-poetry-${{ matrix.python }}-${{ hashFiles('poetry.lock') }}

      - name: Download coverage data
        id: download-coverage
        uses: actions/download-artifact@v5
        with:
          name: coverage-data

      - name: Combine coverage data and display human readable report
        id: combine-coverage
        run: |
          nox --session=coverage

      - name: Create coverage report
        id: create-coverage-report
        run: |
          nox --session=coverage -- xml

      - name: Upload coverage report to Codecov
        id: upload-coverage-report
        uses: codecov/codecov-action@v5.4.3
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
